name: Setup Environment with Terraform
description: This action sets up the given environment using Terraform.
inputs:
  deploy-env:
    description: The environment to deploy to.
    required: true
  azure-resource-group:
    description: The Azure Resource Group for this environment.
    required: true
  azure-client-id:
    description: The Azure client_id for this environment.
    required: true
  azure-tenant-id:
    description: The Azure tenant_id for this environment.
    required: true
  azure-subscription-id:
    description: The Azure subscription_id for this environment.
    required: true
  app-name:
    description: The name of the application being deployed in Terraform.
    required: true
  # terraform_arm_client_id:
  #   description: Terraform ARM client ID
  #   required: true
  # terraform_arm_client_secret:
  #   description: Terraform ARM client secret
  #   required: true
  # terraform_arm_subscription_id:
  #   description: Terraform ARM subscription ID
  #   required: true
  # terraform_arm_tenant_id:
  #   description: Terraform ARM tenant ID
  #   required: true

runs:
  using: composite
  steps:
    - uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v3
    # - name: Terraform Init
    #   working-directory: ./ops/terraform/envs
    #   env: # all Azure interaction is through Terraform
    #     ARM_CLIENT_ID: ${{ inputs.terraform_arm_client_id }}
    #     ARM_CLIENT_SECRET: ${{ inputs.terraform_arm_client_secret }}
    #     ARM_SUBSCRIPTION_ID: ${{ inputs.terraform_arm_subscription_id }}
    #     ARM_TENANT_ID: ${{ inputs.terraform_arm_tenant_id }}
    #   shell: bash
    #   run: make init-${{ inputs.deploy_env }}
    - name: Load input variables
      working-directory: ./ops/terraform
      shell: bash
      env:
        SUBSCRIPTION_ID: ${{ inputs.azure-subscription-id }}
        RESOURCE_GROUP_NAME: ${{ inputs.azure-resource-group }}
        CLIENT_ID: ${{ inputs.azure-client-id }}
      run: |
        echo subscription_id=\""$SUBSCRIPTION_ID"\" >> terraform.tfvars
        echo resource_group_name=\""$RESOURCE_GROUP_NAME"\" >> terraform.tfvars
        echo client_id=\""$CLIENT_ID"\" >> terraform.tfvars
        echo name=\""$NAME"\" >> terraform.tfvars
        az config set defaults.group=$RESOURCE_GROUP_NAME
    - name: Set environment
      shell: bash
      id: set-environment
      env:
        DEPLOY_ENV: ${{ inputs.deploy-env }}
      run: |-
        echo "tf-env=$(
          echo ${DEPLOY_ENV}
        )" >> $GITHUB_OUTPUT
    - name: Terraform deploy
      working-directory: ./ops/terraform
      env:
        ARM_CLIENT_ID: ${{ inputs.azure-client-id }}
        ARM_TENANT_ID: ${{ inputs.azure-tenant-id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.azure-subscription-id }}
        TF_ENV: ${{ steps.set-environment.outputs.tf-env }}

      # env: # all Azure interaction is through Terraform
      #   ARM_CLIENT_ID: ${{ inputs.terraform_arm_client_id }}
      #   ARM_CLIENT_SECRET: ${{ inputs.terraform_arm_client_secret }}
      #   ARM_SUBSCRIPTION_ID: ${{ inputs.terraform_arm_subscription_id }}
      #   ARM_TENANT_ID: ${{ inputs.terraform_arm_tenant_id }}
      shell: bash
      run: |
        terraform init -backend-config=config/$TF_ENV.config
        terraform workspace select -or-create $TF_ENV
        terraform plan -lock-timeout=30m
        terraform apply -auto-approve -lock-timeout=30m