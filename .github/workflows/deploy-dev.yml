name: Build and deploy all of ReportVision's services to a development environment

on:
  push:
    branches: reusable-gha-tf-deploy
  # workflow_dispatch:
  #   inputs:
  #     deploy-env:
  #       description: 'The environment to deploy to'
  #       required: true
  #       type: choice
  #       options:
  #         - dev
  #         - dev2
  #         - dev3
  #         - dev4
  #         - dev5
  #         - dev6
  #     ocr-version:
  #       description: 'Create a version for this OCR API image'
  #       required: true

permissions:
  id-token: write
  contents: read

env:
  NODE_VERSION: 20
  APP_NAME: reportversion
  DEPLOY_ENV: dev2
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  
jobs:
  build_publish_ocr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
  #     - name: Build and Push backend
  #       uses: ./.github/actions/build-publish-api
  #       with:
  #         docker-registry: ghcr.io
  #         docker-pw: ${{ secrets.GITHUB_TOKEN }}
  #         docker-username: ${{ github.actor }}
  #         docker-tag: ${{ inputs.ocr-version }}
  #         dockerfile-path: ./OCR/Dockerfile
  #         docker-context-path: ./OCR/
  #         api-name: ocr-api

  # build_frontend:
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ./.github/actions/build-frontend
  #       name: Build front-end application
  #       with:
  #         frontend-tarball: ./frontend.tgz
  #         deploy-env: ${{ inputs.deploy-env }}
  #         frontend-path: ./frontend
  #         frontend-build-path: ./frontend/dist/

  env-setup:
    runs-on: ubuntu-latest
    # needs: [build_frontend, build_docker_ocr]
    steps:
      - uses: actions/checkout@v4
      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Load input variables
        working-directory: ./ops/terraform
        shell: bash
        env:
          RESOURCE_GROUP_NAME: ${{ env.APP_NAME}}-rg-${{ env.DEPLOY_ENV }}
        run: |
          # echo subscription_id=\""$SUBSCRIPTION_ID"\" >> terraform.tfvars
          echo resource_group_name=\""$RESOURCE_GROUP_NAME"\" >> terraform.tfvars
          # echo client_id=\""$CLIENT_ID"\" >> terraform.tfvars
          echo name=\""$APP_NAME"\" >> terraform.tfvars
          az config set defaults.group=$RESOURCE_GROUP_NAME
      - name: Set environment
        shell: bash
        id: set-environment
        run: |-
          echo "tf-env=$(
            echo ${DEPLOY_ENV}
          )" >> $GITHUB_OUTPUT
      - name: Terraform deploy
        working-directory: ./ops/terraform
        env:
          TF_ENV: ${{ steps.set-environment.outputs.tf-env }}
        shell: bash
        run: |
          terraform init -backend-config=config/$TF_ENV.config
          terraform workspace select -or-create $TF_ENV
          terraform plan -lock-timeout=30m
          terraform apply -auto-approve -lock-timeout=30m
      # - uses: ./.github/actions/tf-setup
      #   name: Setup this environment with Terraform
      #   with:
      #     deploy-env: dev2
      #     azure-resource-group: reportvision-rg-dev2
      #     # azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #     # azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #     # azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      #     app-name: reportvision